# Multi-Language CI/CD Pipeline with Just Commands
# Mirrors the justfile commands for consistent local-CI parity

name: Just Pipeline - Multi-Language CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "justfile"
      - "src/**"
      - "pom.xml"
      - "build.gradle"
      - "package.json"
      - "Cargo.toml"
      - "go.mod"
      - "*.csproj"
      - "pyproject.toml"
  pull_request:
    branches: [main, develop]
  schedule:
    # Nightly security scans
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      command:
        description: "Just command to run"
        required: false
        default: "build"
        type: choice
        options:
          - build
          - test
          - lint
          - format
          - security
          - coverage
          - deploy

jobs:
  # =============================================================================
  # STACK DETECTION & ENVIRONMENT SETUP
  # =============================================================================

  detect-stack:
    name: 🔍 Detect Project Stack
    runs-on: ubuntu-latest
    outputs:
      java: ${{ steps.detect.outputs.java }}
      maven: ${{ steps.detect.outputs.maven }}
      gradle: ${{ steps.detect.outputs.gradle }}
      node: ${{ steps.detect.outputs.node }}
      python: ${{ steps.detect.outputs.python }}
      rust: ${{ steps.detect.outputs.rust }}
      go: ${{ steps.detect.outputs.go }}
      dotnet: ${{ steps.detect.outputs.dotnet }}
      project-type: ${{ steps.detect.outputs.project-type }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect project type
        id: detect
        run: |
          echo "🔍 Detecting project type..."

          # Java/Maven detection
          if [ -f "pom.xml" ]; then
            echo "java=true" >> $GITHUB_OUTPUT
            echo "maven=true" >> $GITHUB_OUTPUT
            echo "project-type=maven" >> $GITHUB_OUTPUT
            echo "📦 Maven project detected"
          elif [ -f "build.gradle" ]; then
            echo "java=true" >> $GITHUB_OUTPUT
            echo "gradle=true" >> $GITHUB_OUTPUT
            echo "project-type=gradle" >> $GITHUB_OUTPUT
            echo "📦 Gradle project detected"
          fi

          # Node.js detection
          if [ -f "package.json" ]; then
            echo "node=true" >> $GITHUB_OUTPUT
            echo "📦 Node.js project detected"
          fi

          # Python detection
          if [ -f "pyproject.toml" ] || [ -f "requirements.txt" ]; then
            echo "python=true" >> $GITHUB_OUTPUT
            echo "📦 Python project detected"
          fi

          # Rust detection
          if [ -f "Cargo.toml" ]; then
            echo "rust=true" >> $GITHUB_OUTPUT
            echo "📦 Rust project detected"
          fi

          # Go detection
          if [ -f "go.mod" ]; then
            echo "go=true" >> $GITHUB_OUTPUT
            echo "📦 Go project detected"
          fi

          # .NET detection
          if [ -f "*.csproj" ]; then
            echo "dotnet=true" >> $GITHUB_OUTPUT
            echo "📦 .NET project detected"
          fi

          echo "✅ Stack detection completed"

  # =============================================================================
  # UNIVERSAL COMMANDS (Cross-platform, build-tool agnostic)
  # =============================================================================

  setup-environment:
    name: 🔧 Setup Environment
    runs-on: ubuntu-latest
    needs: detect-stack
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: needs.detect-stack.outputs.java == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: ${{ needs.detect-stack.outputs.maven == 'true' && 'maven' || needs.detect-stack.outputs.gradle == 'true' && 'gradle' || '' }}

      - name: Setup Node.js
        if: needs.detect-stack.outputs.node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: needs.detect-stack.outputs.python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: needs.detect-stack.outputs.rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: needs.detect-stack.outputs.go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: needs.detect-stack.outputs.dotnet == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Verify Just installation
        run: just --version

  # =============================================================================
  # BUILD COMMANDS
  # =============================================================================

  build:
    name: 🔨 Build Application
    runs-on: ubuntu-latest
    needs: [detect-stack, setup-environment]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Java/Maven
            condition: needs.detect-stack.outputs.maven == 'true'
            command: build
          - name: Java/Gradle
            condition: needs.detect-stack.outputs.gradle == 'true'
            command: build
          - name: Node.js
            condition: needs.detect-stack.outputs.node == 'true'
            command: build
          - name: Python
            condition: needs.detect-stack.outputs.python == 'true'
            command: build
          - name: Rust
            condition: needs.detect-stack.outputs.rust == 'true'
            command: build
          - name: Go
            condition: needs.detect-stack.outputs.go == 'true'
            command: build
          - name: .NET
            condition: needs.detect-stack.outputs.dotnet == 'true'
            command: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: matrix.condition == 'needs.detect-stack.outputs.maven == \'true\''
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Setup Java
        if: matrix.condition == 'needs.detect-stack.outputs.gradle == \'true\''
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Setup Node.js
        if: matrix.condition == 'needs.detect-stack.outputs.node == \'true\''
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: matrix.condition == 'needs.detect-stack.outputs.python == \'true\''
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: matrix.condition == 'needs.detect-stack.outputs.rust == \'true\''
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: matrix.condition == 'needs.detect-stack.outputs.go == \'true\''
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: matrix.condition == 'needs.detect-stack.outputs.dotnet == \'true\''
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Run Just Build
        run: just build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.name }}
          path: |
            target/
            dist/
            build/
            *.jar
            *.war
            *.ear

  # =============================================================================
  # TEST COMMANDS
  # =============================================================================

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: [detect-stack, setup-environment]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Java/Maven
            condition: needs.detect-stack.outputs.maven == 'true'
            command: test
          - name: Java/Gradle
            condition: needs.detect-stack.outputs.gradle == 'true'
            command: test
          - name: Node.js
            condition: needs.detect-stack.outputs.node == 'true'
            command: test
          - name: Python
            condition: needs.detect-stack.outputs.python == 'true'
            command: test
          - name: Rust
            condition: needs.detect-stack.outputs.rust == 'true'
            command: test
          - name: Go
            condition: needs.detect-stack.outputs.go == 'true'
            command: test
          - name: .NET
            condition: needs.detect-stack.outputs.dotnet == 'true'
            command: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: matrix.condition == 'needs.detect-stack.outputs.maven == \'true\''
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven

      - name: Setup Java
        if: matrix.condition == 'needs.detect-stack.outputs.gradle == \'true\''
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Setup Node.js
        if: matrix.condition == 'needs.detect-stack.outputs.node == \'true\''
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: matrix.condition == 'needs.detect-stack.outputs.python == \'true\''
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: matrix.condition == 'needs.detect-stack.outputs.rust == \'true\''
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: matrix.condition == 'needs.detect-stack.outputs.go == \'true\''
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: matrix.condition == 'needs.detect-stack.outputs.dotnet == \'true\''
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Run Just Test
        run: just test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.name }}
          path: |
            test-results/
            coverage/
            reports/

  # =============================================================================
  # QUALITY COMMANDS
  # =============================================================================

  lint:
    name: 🔍 Lint Code
    runs-on: ubuntu-latest
    needs: [detect-stack, setup-environment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: needs.detect-stack.outputs.java == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: ${{ needs.detect-stack.outputs.maven == 'true' && 'maven' || needs.detect-stack.outputs.gradle == 'true' && 'gradle' || '' }}

      - name: Setup Node.js
        if: needs.detect-stack.outputs.node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: needs.detect-stack.outputs.python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: needs.detect-stack.outputs.rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: needs.detect-stack.outputs.go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: needs.detect-stack.outputs.dotnet == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Run Just Lint
        run: just lint

  format:
    name: 🎨 Format Code
    runs-on: ubuntu-latest
    needs: [detect-stack, setup-environment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: needs.detect-stack.outputs.java == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: ${{ needs.detect-stack.outputs.maven == 'true' && 'maven' || needs.detect-stack.outputs.gradle == 'true' && 'gradle' || '' }}

      - name: Setup Node.js
        if: needs.detect-stack.outputs.node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: needs.detect-stack.outputs.python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: needs.detect-stack.outputs.rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: needs.detect-stack.outputs.go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: needs.detect-stack.outputs.dotnet == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Run Just Format
        run: just format

  # =============================================================================
  # COVERAGE COMMANDS
  # =============================================================================

  coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    needs: [detect-stack, setup-environment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: needs.detect-stack.outputs.java == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: ${{ needs.detect-stack.outputs.maven == 'true' && 'maven' || needs.detect-stack.outputs.gradle == 'true' && 'gradle' || '' }}

      - name: Setup Node.js
        if: needs.detect-stack.outputs.node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: needs.detect-stack.outputs.python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: needs.detect-stack.outputs.rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: needs.detect-stack.outputs.go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: needs.detect-stack.outputs.dotnet == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Run Just Coverage
        run: just coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            target/site/jacoco/
            coverage/
            reports/

  # =============================================================================
  # SECURITY COMMANDS
  # =============================================================================

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [detect-stack, setup-environment]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: needs.detect-stack.outputs.java == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: ${{ needs.detect-stack.outputs.maven == 'true' && 'maven' || needs.detect-stack.outputs.gradle == 'true' && 'gradle' || '' }}

      - name: Setup Node.js
        if: needs.detect-stack.outputs.node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: needs.detect-stack.outputs.python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: needs.detect-stack.outputs.rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: needs.detect-stack.outputs.go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: needs.detect-stack.outputs.dotnet == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Run Security Scan
        run: just security-scan || echo "Security scan not implemented yet"

      - name: Run Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "PetClinic"
          path: "."
          format: "HTML"
          out: "reports"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

  # =============================================================================
  # DEPLOYMENT COMMANDS
  # =============================================================================

  deploy:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs:
      [detect-stack, setup-environment, build, test, lint, coverage, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        if: needs.detect-stack.outputs.java == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: ${{ needs.detect-stack.outputs.maven == 'true' && 'maven' || needs.detect-stack.outputs.gradle == 'true' && 'gradle' || '' }}

      - name: Setup Node.js
        if: needs.detect-stack.outputs.node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Python
        if: needs.detect-stack.outputs.python == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Setup Rust
        if: needs.detect-stack.outputs.rust == 'true'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup Go
        if: needs.detect-stack.outputs.go == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Setup .NET
        if: needs.detect-stack.outputs.dotnet == 'true'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Run Just Deploy
        run: just deploy

      - name: Deploy to Kubernetes
        if: needs.detect-stack.outputs.java == 'true'
        run: |
          echo "🚀 Deploying to Kubernetes..."
          # Add your Kubernetes deployment logic here
          # kubectl apply -f k8s/

      - name: Deploy to Cloud Platform
        if: needs.detect-stack.outputs.node == 'true'
        run: |
          echo "🚀 Deploying to cloud platform..."
          # Add your cloud deployment logic here
          # npm run deploy

  # =============================================================================
  # NOTIFICATIONS & REPORTING
  # =============================================================================

  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [build, test, lint, coverage, security, deploy]
    if: always()
    steps:
      - name: Notify on Success
        if: success()
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "📊 Build: ${{ needs.build.result }}"
          echo "🧪 Test: ${{ needs.test.result }}"
          echo "🔍 Lint: ${{ needs.lint.result }}"
          echo "📊 Coverage: ${{ needs.coverage.result }}"
          echo "🔒 Security: ${{ needs.security.result }}"
          echo "🚀 Deploy: ${{ needs.deploy.result }}"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          echo "📊 Build: ${{ needs.build.result }}"
          echo "🧪 Test: ${{ needs.test.result }}"
          echo "🔍 Lint: ${{ needs.lint.result }}"
          echo "📊 Coverage: ${{ needs.coverage.result }}"
          echo "🔒 Security: ${{ needs.security.result }}"
          echo "🚀 Deploy: ${{ needs.deploy.result }}"
