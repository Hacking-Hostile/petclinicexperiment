# Multi-Language CI/CD Pipeline - Trigger Layer
# This workflow implements the complete Trigger Layer from the architecture diagram

name: Trigger Layer

# =============================================================================
# TRIGGER LAYER - All Event Types
# =============================================================================

on:
  # Push Events
  push:
    branches: [main, develop, feature/*, hotfix/*]
    tags: ['v*', 'release/*']
  
  # Pull Request Events
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  
  # Release Events
  release:
    types: [published, created, edited, deleted]
  
  # Scheduled Events
  schedule:
    # Nightly builds at 2 AM UTC
    - cron: '0 2 * * *'
    # Security scans every Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
    # Dependency updates every Monday at 4 AM UTC
    - cron: '0 4 * * 1'
  
  # Manual Triggers
  workflow_dispatch:
    inputs:
      trigger_type:
        description: 'Type of trigger'
        required: true
        default: 'manual'
        type: choice
        options:
          - manual
          - build
          - security
          - deploy
          - test
      environment:
        description: 'Target environment'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      branch:
        description: 'Branch to trigger on'
        required: false
        default: 'main'
        type: string

jobs:
  # =============================================================================
  # TRIGGER DETECTION & CLASSIFICATION
  # =============================================================================
  
  trigger-detection:
    name: 🔍 Trigger Detection
    runs-on: ubuntu-latest
    outputs:
      trigger_type: ${{ steps.detect.outputs.trigger_type }}
      event_name: ${{ steps.detect.outputs.event_name }}
      branch: ${{ steps.detect.outputs.branch }}
      is_pr: ${{ steps.detect.outputs.is_pr }}
      is_release: ${{ steps.detect.outputs.is_release }}
      is_scheduled: ${{ steps.detect.outputs.is_scheduled }}
      is_manual: ${{ steps.detect.outputs.is_manual }}
      should_build: ${{ steps.detect.outputs.should_build }}
      should_test: ${{ steps.detect.outputs.should_test }}
      should_deploy: ${{ steps.detect.outputs.should_deploy }}
      should_security: ${{ steps.detect.outputs.should_security }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Detect trigger type
        id: detect
        run: |
          echo "🔍 Detecting trigger type..."
          
          # Determine trigger type
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "trigger_type=push" >> $GITHUB_OUTPUT
            echo "event_name=push" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_scheduled=false" >> $GITHUB_OUTPUT
            echo "is_manual=false" >> $GITHUB_OUTPUT
            
            # Check if it's a release tag
            if [[ "${{ github.ref }}" == refs/tags/v* ]] || [[ "${{ github.ref }}" == refs/tags/release/* ]]; then
              echo "is_release=true" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "should_test=true" >> $GITHUB_OUTPUT
            fi
            
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "trigger_type=pull_request" >> $GITHUB_OUTPUT
            echo "event_name=pull_request" >> $GITHUB_OUTPUT
            echo "is_pr=true" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_scheduled=false" >> $GITHUB_OUTPUT
            echo "is_manual=false" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "should_test=true" >> $GITHUB_OUTPUT
            echo "should_security=true" >> $GITHUB_OUTPUT
            
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "trigger_type=release" >> $GITHUB_OUTPUT
            echo "event_name=release" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "is_scheduled=false" >> $GITHUB_OUTPUT
            echo "is_manual=false" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "trigger_type=scheduled" >> $GITHUB_OUTPUT
            echo "event_name=schedule" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_scheduled=true" >> $GITHUB_OUTPUT
            echo "is_manual=false" >> $GITHUB_OUTPUT
            echo "should_security=true" >> $GITHUB_OUTPUT
            
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "trigger_type=manual" >> $GITHUB_OUTPUT
            echo "event_name=workflow_dispatch" >> $GITHUB_OUTPUT
            echo "is_pr=false" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "is_scheduled=false" >> $GITHUB_OUTPUT
            echo "is_manual=true" >> $GITHUB_OUTPUT
            
            # Handle manual trigger types
            if [ "${{ github.event.inputs.trigger_type }}" = "build" ]; then
              echo "should_build=true" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.inputs.trigger_type }}" = "security" ]; then
              echo "should_security=true" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.inputs.trigger_type }}" = "deploy" ]; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.inputs.trigger_type }}" = "test" ]; then
              echo "should_test=true" >> $GITHUB_OUTPUT
            else
              echo "should_build=true" >> $GITHUB_OUTPUT
              echo "should_test=true" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Set branch
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Trigger detection completed"
          echo "Trigger Type: ${{ steps.detect.outputs.trigger_type }}"
          echo "Event: ${{ steps.detect.outputs.event_name }}"
          echo "Branch: ${{ steps.detect.outputs.branch }}"

  # =============================================================================
  # TRIGGER-SPECIFIC HANDLERS
  # =============================================================================
  
  push-handler:
    name: 📤 Push Event Handler
    runs-on: ubuntu-latest
    needs: trigger-detection
    if: needs.trigger-detection.outputs.trigger_type == 'push'
    
    steps:
      - name: Handle push event
        run: |
          echo "📤 Processing push event..."
          echo "Branch: ${{ needs.trigger-detection.outputs.branch }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          
          if [ "${{ needs.trigger-detection.outputs.is_release }}" = "true" ]; then
            echo "🚀 Release detected - triggering deployment pipeline"
          else
            echo "🔨 Code push detected - triggering build pipeline"
          fi

  pull-request-handler:
    name: 🔀 Pull Request Handler
    runs-on: ubuntu-latest
    needs: trigger-detection
    if: needs.trigger-detection.outputs.trigger_type == 'pull_request'
    
    steps:
      - name: Handle pull request
        run: |
          echo "🔀 Processing pull request..."
          echo "PR #${{ github.event.number }}"
          echo "From: ${{ github.event.pull_request.head.ref }}"
          echo "To: ${{ github.event.pull_request.base.ref }}"
          echo "Author: ${{ github.actor }}"
          echo "Action: ${{ github.event.action }}"
          
          echo "✅ Triggering PR validation pipeline"

  release-handler:
    name: 🚀 Release Handler
    runs-on: ubuntu-latest
    needs: trigger-detection
    if: needs.trigger-detection.outputs.trigger_type == 'release'
    
    steps:
      - name: Handle release event
        run: |
          echo "🚀 Processing release event..."
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "Action: ${{ github.event.action }}"
          echo "Author: ${{ github.actor }}"
          
          if [ "${{ github.event.action }}" = "published" ]; then
            echo "✅ Release published - triggering deployment"
          elif [ "${{ github.event.action }}" = "created" ]; then
            echo "📝 Release created - triggering pre-deployment checks"
          elif [ "${{ github.event.action }}" = "edited" ]; then
            echo "✏️ Release edited - re-triggering deployment"
          elif [ "${{ github.event.action }}" = "deleted" ]; then
            echo "🗑️ Release deleted - cleaning up resources"
          fi

  scheduled-handler:
    name: ⏰ Scheduled Handler
    runs-on: ubuntu-latest
    needs: trigger-detection
    if: needs.trigger-detection.outputs.trigger_type == 'scheduled'
    
    steps:
      - name: Handle scheduled event
        run: |
          echo "⏰ Processing scheduled event..."
          echo "Scheduled at: $(date)"
          echo "Cron: ${{ github.event.schedule }}"
          
          # Determine what type of scheduled task this is
          if [[ "${{ github.event.schedule }}" == *"0 2"* ]]; then
            echo "🌙 Nightly build triggered"
          elif [[ "${{ github.event.schedule }}" == *"0 3"* ]]; then
            echo "🔒 Security scan triggered"
          elif [[ "${{ github.event.schedule }}" == *"0 4"* ]]; then
            echo "📦 Dependency update scan triggered"
          fi

  manual-handler:
    name: 👤 Manual Handler
    runs-on: ubuntu-latest
    needs: trigger-detection
    if: needs.trigger-detection.outputs.trigger_type == 'manual'
    
    steps:
      - name: Handle manual trigger
        run: |
          echo "👤 Processing manual trigger..."
          echo "Trigger Type: ${{ github.event.inputs.trigger_type }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Branch: ${{ github.event.inputs.branch }}"
          echo "Triggered by: ${{ github.actor }}"
          
          echo "✅ Manual trigger processed"

  # =============================================================================
  # TRIGGER SUMMARY & NEXT STEPS
  # =============================================================================
  
  trigger-summary:
    name: 📊 Trigger Summary
    runs-on: ubuntu-latest
    needs: [trigger-detection, push-handler, pull-request-handler, release-handler, scheduled-handler, manual-handler]
    
    steps:
      - name: Display trigger summary
        run: |
          echo "📊 TRIGGER LAYER SUMMARY"
          echo "========================"
          echo "Trigger Type: ${{ needs.trigger-detection.outputs.trigger_type }}"
          echo "Event: ${{ needs.trigger-detection.outputs.event_name }}"
          echo "Branch: ${{ needs.trigger-detection.outputs.branch }}"
          echo "Is PR: ${{ needs.trigger-detection.outputs.is_pr }}"
          echo "Is Release: ${{ needs.trigger-detection.outputs.is_release }}"
          echo "Is Scheduled: ${{ needs.trigger-detection.outputs.is_scheduled }}"
          echo "Is Manual: ${{ needs.trigger-detection.outputs.is_manual }}"
          echo ""
          echo "Next Steps:"
          echo "- Should Build: ${{ needs.trigger-detection.outputs.should_build }}"
          echo "- Should Test: ${{ needs.trigger-detection.outputs.should_test }}"
          echo "- Should Deploy: ${{ needs.trigger-detection.outputs.should_deploy }}"
          echo "- Should Security: ${{ needs.trigger-detection.outputs.should_security }}"
          echo ""
          echo "✅ Trigger Layer completed - ready for Orchestration Layer" 